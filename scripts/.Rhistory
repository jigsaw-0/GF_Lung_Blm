#===============================================#
#   CacheBiomaRt : cache biomart query result   #
#===============================================#
CacheBiomaRt <- function() {
# ensembl_gene_id, external_gene_name, entrezgene_id, ensembl_transcript_id : "feature_page" page
# ensembl_gene_id, hsapiens_homolog_ensembl_gene, hsapiens_homolog_associated_gene_name : "homologs" page
# notice that "ensembl_gene_id", "external_gene_name", "ensembl_transcript_id" are also in a homologs page
queries.feature_page <- c("ensembl_gene_id",
"external_gene_name",
"entrezgene_id",
"ensembl_transcript_id")
queries.homologs <- c("ensembl_gene_id",
"hsapiens_homolog_ensembl_gene",
"hsapiens_homolog_associated_gene_name")
bm.mart <- biomaRt::useEnsembl(biomart = "genes",
dataset = "mmusculus_gene_ensembl")
# different attribute pages can't be queried with a single getBM()
bm.query.feature_page <- biomaRt::getBM(attributes = queries.feature_page,
mart = bm.mart)
bm.query.homologs <- biomaRt::getBM(attributes = queries.homologs,
mart = bm.mart)
# do not handle NA or empty values here. retain full data
bm.query <- merge(bm.query.feature_page, bm.query.homologs, by = "ensembl_gene_id", all = T)
# always remember that bm.query will contain empty values, NA values, duplicated names
assign("biomart.cache", bm.query, envir = .GlobalEnv)
fst::write.fst(bm.query, "data/biomart.cache")
}
getwd()
setwd("GF_Lunb_Blm/R")
?strsplit
strsplit(getwd(), '//')
strsplit(getwd(), '/')
length(strsplit(getwd(), '/'))
length(strsplit(getwd(), '/'))[[1]]
length(strsplit(getwd(), '/')[[1]])
strsplit(getwd(), '/')[[1]][7]
setwd("../R")
setwd("../")
if (strsplit(getwd(), '/')[[1]][length(strsplit(getwd(), '/')[[1]])] == 'scripts')
setwd("../")
if (strsplit(getwd(), '/')[[1]][length(strsplit(getwd(), '/')[[1]])] == 'scripts') {
setwd("../")
}
getwd()
# package handling
packages <- c("tidyverse", "reshape2", "readxl", "writexl",
"AnnotationHub", "ensembldb", "biomaRt", "fst", "msigdbr",
"sva", "tximport", "DESeq2", "apeglm", "ashr",
"AnnotationDbi", "org.Mm.eg.db", "org.Hs.eg.db",
"GSVA", "decoupleR", "OmnipathR", "clusterProfiler",
"EnhancedVolcano", "circlize", "ggrepel", "ComplexHeatmap")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
renv::activate()
renv::init()
